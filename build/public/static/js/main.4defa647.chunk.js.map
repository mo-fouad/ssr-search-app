{"version":3,"sources":["fragments/MovieTitle.jsx","components/SearchBar.jsx","components/HistoryData.jsx","App.js","helpers/use-debounce.js","client/index.js"],"names":["MovieTitle","this","props","searchKeyWord","movieTitle","ReactHtmlParser","replace","RegExp","PureComponent","SearchBar","state","clear","searchFor","event","keyWord","target","value","onSearchFor","setState","length","restForm","searchResults","results","className","role","aria-label","id","type","placeholder","spellCheck","autoComplete","onChange","isSearching","onClick","map","movie","key","title","Component","HistoryData","serchHistroyWord","deleteSearchHistory","deleteOneITem","historyItem","index","debouncedSearchTerm","currentTime","deleteHistoryITem","App","useState","searchTerm","setSearchTerm","setResults","setIsSearching","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","searchHistory","setSearchHistory","now","Date","day","getDate","slice","month","getMonth","year","getFullYear","timeArr","toLocaleTimeString","split","dayOrNight","timeNums","getNow","search","axios","get","then","res","data","searchCharacters","tempHistorySearch","splice","ReactDOM","hydrate","document","getElementById"],"mappings":"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","file":"static/js/main.4defa647.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport ReactHtmlParser from \"react-html-parser\";\n\nclass MovieTitle extends PureComponent {\n    render() {\n        const { searchKeyWord, movieTitle } = this.props;\n\n        return (\n            <>\n                {ReactHtmlParser(movieTitle.replace(new RegExp(searchKeyWord, \"gi\"), `<span> ${searchKeyWord}</span>`))}\n            </>\n        );\n    }\n}\n\nexport default MovieTitle;\n","import React, { Component } from \"react\";\nimport Movietitle from \"../fragments/MovieTitle\";\n\nclass SearchBar extends Component {\n    state = {\n        clear: false,\n        searchKeyWord: \"\"\n    };\n\n    searchFor = event => {\n        const keyWord = event.target.value;\n        const { onSearchFor } = this.props;\n\n        this.setState({ searchKeyWord: keyWord });\n\n        onSearchFor(keyWord);\n        if (keyWord.length > 0) {\n            this.setState({ clear: true });\n        } else {\n            this.setState({ clear: false });\n        }\n    };\n\n    restForm = () => {\n        //resetting the form\n        this.setState({ searchKeyWord: \"\" });\n    };\n\n    render() {\n        const { searchResults: { results } = {} } = this.props;\n        const { searchKeyWord } = this.state;\n\n        return (\n            <>\n                <div className=\"search-bar\">\n                    <form role=\"search\" aria-label=\"header-search\">\n                        <input\n                            className=\"search-bar--input\"\n                            id=\"searchInput\"\n                            type=\"text\"\n                            aria-label=\"Search\"\n                            placeholder=\"Search For Movies\"\n                            spellCheck=\"false\"\n                            autoComplete=\"off\"\n                            value={this.state.searchKeyWord}\n                            onChange={this.searchFor}\n                        />\n                    </form>\n                    {this.props.isSearching && <span className=\"search-bar--loading\" />}\n                    {this.state.clear && !this.props.isSearching && (\n                        <span onClick={this.restForm} className=\"search-bar--clear\" />\n                    )}\n\n                    {results && searchKeyWord.length > 0 && (\n                        <>\n                            {results.length > 0 ? (\n                                <div className=\"search-bar--result\">\n                                    <ul>\n                                        {results.map(movie => (\n                                            <li key={movie.id}>\n                                                <Movietitle movieTitle={movie.title} searchKeyWord={searchKeyWord} />\n                                            </li>\n                                        ))}\n                                    </ul>\n                                </div>\n                            ) : (\n                                <span className=\"search-bar--nothing\">Nothing found for this search :(</span>\n                            )}\n                        </>\n                    )}\n                </div>\n            </>\n        );\n    }\n}\n\nexport default SearchBar;\n","import React from \"react\";\n\nfunction HistoryData(props) {\n    const { serchHistroyWord, deleteSearchHistory, deleteOneITem } = props;\n\n    const ShouldDeleteSearchHistory = () => {\n        deleteSearchHistory();\n    };\n    const deleteHistoryITem = index => {\n        deleteOneITem(index);\n    };\n\n    return (\n        <div className=\"search-history\">\n            <div className=\"search-history--title\">\n                <h3>History will be added Here</h3>\n                <span onClick={ShouldDeleteSearchHistory}>clear search history</span>\n            </div>\n            <ul>\n                {serchHistroyWord &&\n                    serchHistroyWord.length > 0 &&\n                    serchHistroyWord.map((historyItem, index) => (\n                        <li key={index}>\n                            <span>{historyItem.debouncedSearchTerm} </span>\n                            <span>{historyItem.currentTime}</span>\n                            <span onClick={() => deleteHistoryITem(index)} />\n                        </li>\n                    ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default HistoryData;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport useDebounce from \"./helpers/use-debounce\";\n\nimport \"./scss/app.scss\";\nimport SearchBar from \"./components/SearchBar\";\nimport HistoryData from \"./components/HistoryData\";\n\n// Usage\nfunction App() {\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [results, setResults] = useState([]);\n    const [isSearching, setIsSearching] = useState(false);\n    const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n    const [searchHistory, setSearchHistory] = useState([]);\n\n    useEffect(() => {\n        // Make sure we have a value (user has entered something in input)\n        if (debouncedSearchTerm) {\n            // Adding to Search History\n            let currentTime = getNow();\n            setSearchHistory([...searchHistory, { debouncedSearchTerm, currentTime }]);\n\n            // Set isSearching state\n            setIsSearching(true);\n\n            // Fire off our API call\n            searchCharacters(debouncedSearchTerm).then(results => {\n                // Set back to false since request finished\n                setIsSearching(false);\n                // Set results state\n                setResults(results);\n            });\n        } else {\n            setResults([]);\n        }\n    }, [debouncedSearchTerm]);\n\n    const updateingSearch = keyWord => {\n        setSearchTerm(keyWord);\n    };\n\n    const deleteSearchHistory = () => {\n        setSearchHistory([]);\n    };\n\n    const deleteSearchHistoryItem = index => {\n        let tempHistorySearch = [...searchHistory];\n        if (index !== -1) {\n            tempHistorySearch.splice(index, 1);\n            setSearchHistory(tempHistorySearch);\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"SEOHidden\">Simple Search Application</h1>\n            <header>\n                <SearchBar onSearchFor={updateingSearch} isSearching={isSearching} searchResults={results} />\n            </header>\n            <section>\n                <HistoryData\n                    serchHistroyWord={searchHistory}\n                    deleteSearchHistory={deleteSearchHistory}\n                    deleteOneITem={deleteSearchHistoryItem}\n                />\n            </section>\n        </div>\n    );\n}\n\n// API search function\nfunction searchCharacters(search) {\n    if (search.length > 0) {\n        const apiKey = `efc3ede5b4a823ca3562c605cbc4ddf7`;\n        return axios\n            .get(\n                `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=en-US&query=${search}&page=1&include_adult=false`\n            )\n            .then(res => {\n                return res.data;\n            });\n    }\n}\n\n// Get Time for Search History\nfunction getNow() {\n    let now = new Date();\n    let day = (\"0\" + now.getDate()).slice(-2);\n    let month = (\"0\" + (now.getMonth() + 1)).slice(-2);\n    let year = now.getFullYear();\n    let timeArr = now.toLocaleTimeString().split(\" \");\n    let dayOrNight = timeArr[1];\n    let timeNums = timeArr[0].split(\":\");\n\n    return `${year}-${month}-${day}, ${timeNums[0]}:${timeNums[1]} ${dayOrNight}`;\n}\n\nexport default App;\n","import React, { useState, useEffect } from \"react\";\n\n// Our hook\nexport default function useDebounce(value, delay) {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Set debouncedValue to value (passed in) after the specified delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Return a cleanup function that will be called every time ...\n            // ... useEffect is re-called. useEffect will only be re-called ...\n            // ... if value changes (see the inputs array below).\n            // This is how we prevent debouncedValue from changing if value is ...\n            // ... changed within the delay period. Timeout gets cleared and restarted.\n            // To put it in context, if the user is typing within our app's ...\n            // ... search box, we don't want the debouncedValue to update until ...\n            // ... they've stopped typing for more than 500ms.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        // Only re-call effect if value changes\n        // You could also add the \"delay\" var to inputs array if you ...\n        // ... need to be able to change that dynamically.\n        [value]\n    );\n\n    return debouncedValue;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"../App\";\n\nReactDOM.hydrate(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}